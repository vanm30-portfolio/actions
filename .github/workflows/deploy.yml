name: Deploy Workflow

on:
  workflow_call:
    inputs:
      env-vars:
        description: 'JSON string of project specific environment variables'
        required: false
        type: string
        default: '{}'

jobs:
  vars:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.set-vars.outputs.image-name}}
      env-flags: ${{ steps.set-vars.outputs.env-flags }}
      container-name: ${{ steps.set-vars.outputs.container-name }}
    steps:
      - name: Compute variables
        id: set-vars
        env: 
          ENV_JSON: ${{ inputs.env_vars }}
        run: |
          ENV_FLAGS=$(echo "$ENV_JSON" | jq -r 'to_entries | map("-e \(.key)=\(.value)") | join(" ")')

          REF="${{ github.ref }}"
          TAG_NAME="${REF##*/}"
          REPO_NAME="${{ github.event.repository.name }}"
          CONTAINER_NAME=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${CONTAINER_NAME}:${TAG_NAME}"

          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "container-name=${CONTAINER_NAME}" >> $GITHUB_OUTPUT
          echo "env-flags=$ENV_FLAGS" >> $GITHUB_OUTPUT

  build-and-deploy:
    needs: vars
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t "${{ needs.vars.outputs.image_name }}" .
          docker push "${{ secrets.DOCKER_REPO }}/${{ needs.vars.outputs.image_name }}"

      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Pulling image"
            docker pull "${{ secrets.DOCKER_REPO }}/${{ needs.vars.outputs.image_name }}"

            echo "Checking if container ${{ needs.vars.outputs.container-name }} exists..."
            if [ "$(docker ps -aq -f name=^${{ needs.vars.outputs.container-name }}$)" ]; then
              echo "Stopping and removing existing container..."
              docker stop "${{ needs.vars.outputs.container-name }}"
              docker rm "${{ needs.vars.outputs.container-name }}"
            else
              echo "No existing container found."
            fi

            echo "Running new container..."
            docker run -d \
              --restart unless-stopped \
              -p "${{ secrets.EXPOSED_PORT }}:${{ secrets.INTERNAL_PORT }}" \
              --name "${{ needs.vars.outputs.container-name }}" \
              ${{ needs.vars.outputs.env-flags }}\
              "${{ needs.vars.outputs.image-src }}"

            echo "Deployment complete."
