name: Deploy Workflow

on:
  workflow_call:
    inputs:
      config:
        description: 'JSON string of project specific environment variables'
        required: false
        type: string
        default: '{}'

jobs:
  set-image-name:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image-name.outputs.image }}
    steps:
      - name: Debug Secret
        run: echo "NEXT_PUBLIC_APP_TEST is ${{ secrets.NEXT_PUBLIC_APP_TEST }}"
      - run: echo "Deploying with config ${{ inputs.config }}"
      
      - name: Compute Image Name
        id: image-name
        run: |
          REF="${{ github.ref }}"
          TAG_NAME="${REF##*/}"
          REPO_NAME="${{ github.event.repository.name }}"
          LOWER_REPO_NAME=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${LOWER_REPO_NAME}:${TAG_NAME}"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

  build-and-deploy:
    needs: set-image-name
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          FULL_IMAGE_NAME="${{ secrets.DOCKER_REPO }}/${{ needs.set-vals.outputs.image-name }}"
          echo "Building Docker image: $FULL_IMAGE_NAME"
          docker build -t "$FULL_IMAGE_NAME" .
          echo "Pushing Docker image to Docker Hub..."
          docker push "$FULL_IMAGE_NAME"

      - name: Deploy to production
        env:
          ENV_JSON: ${{ inputs.env-vars }}
        run: |
          # Write SSH key to a temporary file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
          chmod 600 ssh_key

          # Parse project specific environment variables into Docker flags
          ENV_FLAGS=$(echo "$ENV_JSON" | jq -r 'to_entries | map("-e \(.key)=\(.value)") | join(" ")')
          CONTAINER_NAME=$(echo "${{ needs.set-vals.outputs.image-name }}" | cut -d':' -f1)
          FULL_IMAGE_NAME="${{ secrets.DOCKER_REPO }}/${{ needs.set-vals.outputs.image-name }}"

          # SSH into the server and deploy
          ssh -i ssh_key "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" << EOF
            echo "Pulling Docker image: $FULL_IMAGE_NAME"
            docker pull "$FULL_IMAGE_NAME"

            echo "Checking if container $CONTAINER_NAME exists..."
            if [ "$(docker ps -aq -f name=^${CONTAINER_NAME}$)" ]; then
              echo "Stopping and removing existing container..."
              docker stop "$CONTAINER_NAME"
              docker rm "$CONTAINER_NAME"
            else
              echo "No existing container found."
            fi

            echo "Running new container..."
            docker run -d \
              --restart unless-stopped \
              -p "${{ secrets.EXPOSED_PORT }}:${{ secrets.INTERNAL_PORT }}" \
              --name "$CONTAINER_NAME" \
              $ENV_FLAGS \
              "$FULL_IMAGE_NAME"

            echo "Deployment complete for $CONTAINER_NAME."
          EOF

          # Check SSH exit status
          if [ $? -eq 0 ]; then
            echo "Successfully deployed $FULL_IMAGE_NAME."
          else
            echo "Deployment failed."
            exit 1
          fi
